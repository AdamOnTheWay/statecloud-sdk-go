// Code generated by crafter generator. DO NOT EDIT.

package eci

import (
	"context"
	"fmt"
	"net/http"

	"github.com/state-cloud/client-go/pkg/common/config"
	"github.com/state-cloud/client-go/pkg/openapi"
	"github.com/state-cloud/client-go/pkg/protocol"

	commitcontainer "github.com/state-cloud/statecloud-sdk-go/service/eci/types/commitcontainer"
)

// unused protection
var (
	_ = fmt.Formatter(nil)
)

type CommitContainerTaskClient interface {
	DescribeCommitContainerTask(context context.Context, req *commitcontainer.DescribeCommitContainerTaskRequest, reqOpt ...config.RequestOption) (resp *commitcontainer.DescribeCommitContainerTaskResponse, rawResponse *protocol.Response, err error)

	CreateCommitContainerTask(context context.Context, req *commitcontainer.CreateCommitContainerTaskRequest, reqOpt ...config.RequestOption) (resp *commitcontainer.CreateCommitContainerTaskResponse, rawResponse *protocol.Response, err error)

	UpdateCommitContainerTask(context context.Context, req *commitcontainer.UpdateCommitContainerTaskRequest, reqOpt ...config.RequestOption) (resp *commitcontainer.UpdateCommitContainerTaskResponse, rawResponse *protocol.Response, err error)

	DeleteCommitContainerTask(context context.Context, req *commitcontainer.DeleteCommitContainerTaskRequest, reqOpt ...config.RequestOption) (resp *commitcontainer.DeleteCommitContainerTaskResponse, rawResponse *protocol.Response, err error)
}

type commitContainerTaskClient struct {
	client *HttpClient
}

func NewCommitContainerTaskClient(hostUrl string, ops ...Option) (CommitContainerTaskClient, error) {
	opts := GetOptions(append(ops, WithHostUrl(hostUrl))...)
	cli, err := NewHttpClient(opts)
	if err != nil {
		return nil, err
	}
	return &commitContainerTaskClient{
		client: cli,
	}, nil
}

func (s *commitContainerTaskClient) DescribeCommitContainerTask(ctx context.Context, req *commitcontainer.DescribeCommitContainerTaskRequest, reqOpt ...config.RequestOption) (resp *commitcontainer.DescribeCommitContainerTaskResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.OpenapiResponse{}
	openapiResp.ReturnObj = &resp
	ret, err := s.client.R().
		SetContext(ctx).
		SetQueryParams(map[string]interface{}{
			"containerGroupId": req.GetContainerGroupId(),
		}).
		SetPathParams(map[string]string{
			"taskId": req.GetTaskId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodGet, "/eci/api/v1/commitcontainer/describeCommitContainerTask/:taskId")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *commitContainerTaskClient) CreateCommitContainerTask(ctx context.Context, req *commitcontainer.CreateCommitContainerTaskRequest, reqOpt ...config.RequestOption) (resp *commitcontainer.CreateCommitContainerTaskResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.OpenapiResponse{}
	openapiResp.ReturnObj = &resp
	ret, err := s.client.R().
		SetContext(ctx).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodPost, "/eci/api/v1/commitcontainer/createCommitContainerTask")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *commitContainerTaskClient) UpdateCommitContainerTask(ctx context.Context, req *commitcontainer.UpdateCommitContainerTaskRequest, reqOpt ...config.RequestOption) (resp *commitcontainer.UpdateCommitContainerTaskResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.OpenapiResponse{}
	openapiResp.ReturnObj = &resp
	ret, err := s.client.R().
		SetContext(ctx).
		SetPathParams(map[string]string{
			"taskId": req.GetTaskId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodPut, "/eci/api/v1/commitcontainer/updateCommitContainerTask/:taskId")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *commitContainerTaskClient) DeleteCommitContainerTask(ctx context.Context, req *commitcontainer.DeleteCommitContainerTaskRequest, reqOpt ...config.RequestOption) (resp *commitcontainer.DeleteCommitContainerTaskResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.OpenapiResponse{}
	openapiResp.ReturnObj = &resp
	ret, err := s.client.R().
		SetContext(ctx).
		SetPathParams(map[string]string{
			"taskId": req.GetTaskId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodDelete, "/eci/api/v1/commitcontainer/deleteCommitContainerTask/:taskId")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

var defaultCommitContainerTaskClient, _ = NewCommitContainerTaskClient(baseDomain)

func ConfigDefaultCommitContainerTaskClient(ops ...Option) (err error) {
	defaultCommitContainerTaskClient, err = NewCommitContainerTaskClient(baseDomain, ops...)
	return
}

func DescribeCommitContainerTask(context context.Context, req *commitcontainer.DescribeCommitContainerTaskRequest, reqOpt ...config.RequestOption) (resp *commitcontainer.DescribeCommitContainerTaskResponse, rawResponse *protocol.Response, err error) {
	return defaultCommitContainerTaskClient.DescribeCommitContainerTask(context, req, reqOpt...)
}

func CreateCommitContainerTask(context context.Context, req *commitcontainer.CreateCommitContainerTaskRequest, reqOpt ...config.RequestOption) (resp *commitcontainer.CreateCommitContainerTaskResponse, rawResponse *protocol.Response, err error) {
	return defaultCommitContainerTaskClient.CreateCommitContainerTask(context, req, reqOpt...)
}

func UpdateCommitContainerTask(context context.Context, req *commitcontainer.UpdateCommitContainerTaskRequest, reqOpt ...config.RequestOption) (resp *commitcontainer.UpdateCommitContainerTaskResponse, rawResponse *protocol.Response, err error) {
	return defaultCommitContainerTaskClient.UpdateCommitContainerTask(context, req, reqOpt...)
}

func DeleteCommitContainerTask(context context.Context, req *commitcontainer.DeleteCommitContainerTaskRequest, reqOpt ...config.RequestOption) (resp *commitcontainer.DeleteCommitContainerTaskResponse, rawResponse *protocol.Response, err error) {
	return defaultCommitContainerTaskClient.DeleteCommitContainerTask(context, req, reqOpt...)
}

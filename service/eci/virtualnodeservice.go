// Code generated by crafter generator. DO NOT EDIT.

package eci

import (
	"context"
	"fmt"
	"net/http"

	"github.com/state-cloud/client-go/pkg/common/config"
	"github.com/state-cloud/client-go/pkg/openapi"
	"github.com/state-cloud/client-go/pkg/protocol"

	virtualnode "github.com/state-cloud/statecloud-sdk-go/service/eci/types/virtualnode"
)

// unused protection
var (
	_ = fmt.Formatter(nil)
)

type VirtualNodeClient interface {
	CreateVirtualNode(context context.Context, req *virtualnode.CreateVirtualNodeRequest, reqOpt ...config.RequestOption) (resp *virtualnode.CreateVirtualNodeResponse, rawResponse *protocol.Response, err error)

	DeleteVirtualNode(context context.Context, req *virtualnode.DeleteVirtualNodeRequest, reqOpt ...config.RequestOption) (resp *virtualnode.DeleteVirtualNodeResponse, rawResponse *protocol.Response, err error)

	UpdateVirtualNode(context context.Context, req *virtualnode.UpdateVirtualNodeRequest, reqOpt ...config.RequestOption) (resp *virtualnode.UpdateVirtualNodeResponse, rawResponse *protocol.Response, err error)

	DescribeVirtualNodes(context context.Context, req *virtualnode.DescribeVirtualNodesRequest, reqOpt ...config.RequestOption) (resp *virtualnode.DescribeVirtualNodesResponse, rawResponse *protocol.Response, err error)
}

type virtualNodeClient struct {
	client *HttpClient
}

func NewVirtualNodeClient(hostUrl string, ops ...Option) (VirtualNodeClient, error) {
	opts := GetOptions(append(ops, WithHostUrl(hostUrl))...)
	cli, err := NewHttpClient(opts)
	if err != nil {
		return nil, err
	}
	return &virtualNodeClient{
		client: cli,
	}, nil
}

func (s *virtualNodeClient) CreateVirtualNode(ctx context.Context, req *virtualnode.CreateVirtualNodeRequest, reqOpt ...config.RequestOption) (resp *virtualnode.CreateVirtualNodeResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.OpenapiResponse{}
	openapiResp.ReturnObj = &resp
	ret, err := s.client.R().
		SetContext(ctx).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodPost, "/eci/api/v1/virtualNode/createVirtualNode")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *virtualNodeClient) DeleteVirtualNode(ctx context.Context, req *virtualnode.DeleteVirtualNodeRequest, reqOpt ...config.RequestOption) (resp *virtualnode.DeleteVirtualNodeResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.OpenapiResponse{}
	openapiResp.ReturnObj = &resp
	ret, err := s.client.R().
		SetContext(ctx).
		SetPathParams(map[string]string{
			"virtualNodeId": req.GetVirtualNodeId(),
		}).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodDelete, "/eci/api/v1/virtualNode/deleteVirtualNode/:virtualNodeId")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *virtualNodeClient) UpdateVirtualNode(ctx context.Context, req *virtualnode.UpdateVirtualNodeRequest, reqOpt ...config.RequestOption) (resp *virtualnode.UpdateVirtualNodeResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.OpenapiResponse{}
	openapiResp.ReturnObj = &resp
	ret, err := s.client.R().
		SetContext(ctx).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodPost, "/eci/api/v1/virtualNode/updateVirtualNode")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *virtualNodeClient) DescribeVirtualNodes(ctx context.Context, req *virtualnode.DescribeVirtualNodesRequest, reqOpt ...config.RequestOption) (resp *virtualnode.DescribeVirtualNodesResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.OpenapiResponse{}
	openapiResp.ReturnObj = &resp
	ret, err := s.client.R().
		SetContext(ctx).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodPost, "/eci/api/v1/virtualNode/describeVirtualNodes")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

var defaultVirtualNodeClient, _ = NewVirtualNodeClient(baseDomain)

func ConfigDefaultVirtualNodeClient(ops ...Option) (err error) {
	defaultVirtualNodeClient, err = NewVirtualNodeClient(baseDomain, ops...)
	return
}

func CreateVirtualNode(context context.Context, req *virtualnode.CreateVirtualNodeRequest, reqOpt ...config.RequestOption) (resp *virtualnode.CreateVirtualNodeResponse, rawResponse *protocol.Response, err error) {
	return defaultVirtualNodeClient.CreateVirtualNode(context, req, reqOpt...)
}

func DeleteVirtualNode(context context.Context, req *virtualnode.DeleteVirtualNodeRequest, reqOpt ...config.RequestOption) (resp *virtualnode.DeleteVirtualNodeResponse, rawResponse *protocol.Response, err error) {
	return defaultVirtualNodeClient.DeleteVirtualNode(context, req, reqOpt...)
}

func UpdateVirtualNode(context context.Context, req *virtualnode.UpdateVirtualNodeRequest, reqOpt ...config.RequestOption) (resp *virtualnode.UpdateVirtualNodeResponse, rawResponse *protocol.Response, err error) {
	return defaultVirtualNodeClient.UpdateVirtualNode(context, req, reqOpt...)
}

func DescribeVirtualNodes(context context.Context, req *virtualnode.DescribeVirtualNodesRequest, reqOpt ...config.RequestOption) (resp *virtualnode.DescribeVirtualNodesResponse, rawResponse *protocol.Response, err error) {
	return defaultVirtualNodeClient.DescribeVirtualNodes(context, req, reqOpt...)
}

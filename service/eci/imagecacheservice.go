// Code generated by crafter generator. DO NOT EDIT.

package eci

import (
	"context"
	"fmt"
	"net/http"

	"github.com/state-cloud/client-go/pkg/common/config"
	"github.com/state-cloud/client-go/pkg/openapi"
	"github.com/state-cloud/client-go/pkg/protocol"

	imagecache "github.com/state-cloud/statecloud-sdk-go/service/eci/types/imagecache"
)

// unused protection
var (
	_ = fmt.Formatter(nil)
)

type ImageCacheClient interface {
	CreateImageCache(context context.Context, req *imagecache.CreateImageCacheRequest, reqOpt ...config.RequestOption) (resp *imagecache.CreateImageCacheResponse, rawResponse *protocol.Response, err error)

	DeleteImageCache(context context.Context, req *imagecache.DeleteImageCacheRequest, reqOpt ...config.RequestOption) (resp *imagecache.DeleteImageCacheResponse, rawResponse *protocol.Response, err error)

	DescribeImageCache(context context.Context, req *imagecache.DescribeImageCacheRequest, reqOpt ...config.RequestOption) (resp *imagecache.DescribeImageCacheResponse, rawResponse *protocol.Response, err error)

	UpdateImageCache(context context.Context, req *imagecache.UpdateImageCacheRequest, reqOpt ...config.RequestOption) (resp *imagecache.UpdateImageCacheResponse, rawResponse *protocol.Response, err error)
}

type imageCacheClient struct {
	client *HttpClient
}

func NewImageCacheClient(hostUrl string, ops ...Option) (ImageCacheClient, error) {
	opts := GetOptions(append(ops, WithHostUrl(hostUrl))...)
	cli, err := NewHttpClient(opts)
	if err != nil {
		return nil, err
	}
	return &imageCacheClient{
		client: cli,
	}, nil
}

func (s *imageCacheClient) CreateImageCache(ctx context.Context, req *imagecache.CreateImageCacheRequest, reqOpt ...config.RequestOption) (resp *imagecache.CreateImageCacheResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.OpenapiResponse{}
	openapiResp.ReturnObj = &resp
	ret, err := s.client.R().
		SetContext(ctx).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodPost, "/eci/api/v1/imageCache/createImageCache")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *imageCacheClient) DeleteImageCache(ctx context.Context, req *imagecache.DeleteImageCacheRequest, reqOpt ...config.RequestOption) (resp *imagecache.DeleteImageCacheResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.OpenapiResponse{}
	openapiResp.ReturnObj = &resp
	ret, err := s.client.R().
		SetContext(ctx).
		SetPathParams(map[string]string{
			"imageCacheId": req.GetImageCacheId(),
		}).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodDelete, "/eci/api/v1/imageCache/deleteImageCache/{imageCacheId}")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *imageCacheClient) DescribeImageCache(ctx context.Context, req *imagecache.DescribeImageCacheRequest, reqOpt ...config.RequestOption) (resp *imagecache.DescribeImageCacheResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.OpenapiResponse{}
	openapiResp.ReturnObj = &resp
	ret, err := s.client.R().
		SetContext(ctx).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodPost, "/eci/api/v1/imageCache/describeImageCaches")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

func (s *imageCacheClient) UpdateImageCache(ctx context.Context, req *imagecache.UpdateImageCacheRequest, reqOpt ...config.RequestOption) (resp *imagecache.UpdateImageCacheResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.OpenapiResponse{}
	openapiResp.ReturnObj = &resp
	ret, err := s.client.R().
		SetContext(ctx).
		SetPathParams(map[string]string{
			"imageCacheId": req.GetImageCacheId(),
		}).
		AddHeaders(map[string]string{
			"regionId": req.GetRegionId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodPut, "/eci/api/v1/imageCache/updateImageCache")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

var defaultImageCacheClient, _ = NewImageCacheClient(baseDomain)

func ConfigDefaultImageCacheClient(ops ...Option) (err error) {
	defaultImageCacheClient, err = NewImageCacheClient(baseDomain, ops...)
	return
}

func CreateImageCache(context context.Context, req *imagecache.CreateImageCacheRequest, reqOpt ...config.RequestOption) (resp *imagecache.CreateImageCacheResponse, rawResponse *protocol.Response, err error) {
	return defaultImageCacheClient.CreateImageCache(context, req, reqOpt...)
}

func DeleteImageCache(context context.Context, req *imagecache.DeleteImageCacheRequest, reqOpt ...config.RequestOption) (resp *imagecache.DeleteImageCacheResponse, rawResponse *protocol.Response, err error) {
	return defaultImageCacheClient.DeleteImageCache(context, req, reqOpt...)
}

func DescribeImageCache(context context.Context, req *imagecache.DescribeImageCacheRequest, reqOpt ...config.RequestOption) (resp *imagecache.DescribeImageCacheResponse, rawResponse *protocol.Response, err error) {
	return defaultImageCacheClient.DescribeImageCache(context, req, reqOpt...)
}

func UpdateImageCache(context context.Context, req *imagecache.UpdateImageCacheRequest, reqOpt ...config.RequestOption) (resp *imagecache.UpdateImageCacheResponse, rawResponse *protocol.Response, err error) {
	return defaultImageCacheClient.UpdateImageCache(context, req, reqOpt...)
}

// Code generated by crafter generator. DO NOT EDIT.

package eci

import (
	"context"
	"fmt"
	"net/http"

	"github.com/state-cloud/client-go/pkg/common/config"
	"github.com/state-cloud/client-go/pkg/openapi"
	"github.com/state-cloud/client-go/pkg/protocol"

	iam "github.com/state-cloud/statecloud-sdk-go/service/eci/types/iam"
)

// unused protection
var (
	_ = fmt.Formatter(nil)
)

type EnterpriseProjectClient interface {
	GetUserEpPolicy(context context.Context, req *iam.GetUserEpPolicyRequest, reqOpt ...config.RequestOption) (resp *iam.GetUserEpPolicyResponse, rawResponse *protocol.Response, err error)
}

type enterpriseProjectClient struct {
	client *HttpClient
}

func NewEnterpriseProjectClient(hostUrl string, ops ...Option) (EnterpriseProjectClient, error) {
	opts := GetOptions(append(ops, WithHostUrl(hostUrl))...)
	cli, err := NewHttpClient(opts)
	if err != nil {
		return nil, err
	}
	return &enterpriseProjectClient{
		client: cli,
	}, nil
}

func (s *enterpriseProjectClient) GetUserEpPolicy(ctx context.Context, req *iam.GetUserEpPolicyRequest, reqOpt ...config.RequestOption) (resp *iam.GetUserEpPolicyResponse, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.OpenapiResponse{}
	openapiResp.ReturnObj = &resp
	ret, err := s.client.R().
		SetContext(ctx).
		SetQueryParams(map[string]interface{}{
			"accountId": req.GetAccountId(),
			"userId":    req.GetUserId(),
		}).
		SetBodyParam(req).
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.MethodGet, "/eci/api/v1/iam/userEpPolicy")
	if err != nil {
		return nil, nil, err
	}

	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}

var defaultEnterpriseProjectClient, _ = NewEnterpriseProjectClient(baseDomain)

func ConfigDefaultEnterpriseProjectClient(ops ...Option) (err error) {
	defaultEnterpriseProjectClient, err = NewEnterpriseProjectClient(baseDomain, ops...)
	return
}

func GetUserEpPolicy(context context.Context, req *iam.GetUserEpPolicyRequest, reqOpt ...config.RequestOption) (resp *iam.GetUserEpPolicyResponse, rawResponse *protocol.Response, err error) {
	return defaultEnterpriseProjectClient.GetUserEpPolicy(context, req, reqOpt...)
}
